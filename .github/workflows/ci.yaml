name: Continuous Integration

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install Rust ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
        components: clippy
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    - name: Run Clippy check
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ github.token }}
        args: --all-features
        name: clippy ${{ matrix.rust }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs:
    - check
    strategy:
      matrix:
        rust: [stable, nightly]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Install Rust ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        components: llvm-tools-preview
        override: true
    - name: Cache build/dependency artifacts
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    - name: Run build
      env:
        RUSTFLAGS: -C instrument-coverage
      run: cargo build --all-features
    - name: Run tests
      env:
        RUSTFLAGS: -C instrument-coverage
        LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
      run: cargo test --all-features
    - name: Download grcov
      run: curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf -
    - name: Parse and aggregate coverage report
      run: |
        ls -al; \
        ./grcov $(find . -name "coverage-*.profraw" -print) \
          --binary-path ./target/debug \
          -t lcov \
          -o lcov.info
    - name: Upload code coverage report
      uses: codecov/codecov-action@v2
      with:
        files: ./lcov.info
        flags: rust-${{ matrix.rust }}
